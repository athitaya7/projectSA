import React, { useState, useEffect } from "react";
import {
  FaUserTie,
  FaCalendarAlt,
  FaBuilding,
  FaBriefcase,
  FaPlus,
  FaTrashAlt,
  FaSearch,
} from "react-icons/fa";

function EmployeeData() {
  const [workInfo, setWorkInfo] = useState(null);
  const [transferHistory, setTransferHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô + ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
  const [employees, setEmployees] = useState([]);
  const [selectedEmp, setSelectedEmp] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
  useEffect(() => {
    const fetchEmployees = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await fetch("http://localhost:3000/api/employees", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = await res.json();
        setEmployees(data);
      } catch (err) {
        console.error("‚ùå Error fetching employees:", err);
      }
    };
    fetchEmployees();
  }, []);

  // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  useEffect(() => {
    if (!selectedEmp) {
      setWorkInfo(null);
      setLoading(false);
      return;
    }

    const fetchWorkInfo = async () => {
      setLoading(true);
      try {
        const token = localStorage.getItem("token");
        const res = await fetch(
          `http://localhost:3000/api/workinfo/${selectedEmp}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);

        const data = await res.json();
        console.log("‚úÖ WorkInfo:", data);
        setWorkInfo(data);
        
        setTransferHistory(data.transfer_history || []);
        console.log("üßæ transferHistory:", data.transfer_history);
      } catch (err) {
        console.error("‚ùå Fetch Work Info Error:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchWorkInfo();
  }, [selectedEmp]);

  // üîπ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e) => {
    const { name, value } = e.target;
    setWorkInfo({ ...workInfo, [name]: value });
  };

  // üîπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢ (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
  const handleAddTransfer = () => {
    setTransferHistory([
      ...transferHistory,
      { date: "", oldPosition: "", newPosition: "", note: "" },
    ]);
  };
  const handleTransferChange = (index, field, value) => {
    const updated = [...transferHistory];
    updated[index][field] = value;
    setTransferHistory(updated);
  };
  const handleDeleteTransfer = (index) => {
    const updated = [...transferHistory];
    updated.splice(index, 1);
    setTransferHistory(updated);
  };

  // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
  const handleSave = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await fetch(
        `http://localhost:3000/api/workinfo/${workInfo.employee_code}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(workInfo),
        }
      );

      const data = await res.json();
      if (res.ok) {
        alert("‚úÖ " + data.message);
      } else {
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + data.message);
      }
    } catch (err) {
      console.error("‚ùå Error saving data:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
  };

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
  const filteredEmployees = employees.filter(
    (e) =>
      e.employee_code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      `${e.first_name} ${e.last_name}`
        .toLowerCase()
        .includes(searchTerm.toLowerCase())
  );

  // üß© ‡∏™‡πà‡∏ß‡∏ô UI
  return (
    <div
      className="container mt-4"
      style={{ fontFamily: "'Kanit', sans-serif", color: "#0b1e39" }}
    >
      {/* üîπ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
      <div className="d-flex align-items-center mb-4">
        <FaUserTie size={20} className="me-2 text-primary" />
        <h4 className="fw-bold mb-0">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h4>
      </div>

      {/* üü© ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà" */}
      <div className="card shadow-sm border-0 rounded-4 mb-4 p-3">
        <div className="row align-items-center">
          <div className="col-md-6 mb-2">
            <label className="fw-semibold">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</label>
            <div className="input-group">
              <span className="input-group-text bg-light">
                <FaSearch className="text-secondary" />
              </span>
              <input
                type="text"
                className="form-control"
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="col-md-6 mb-2">
            <label className="fw-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</label>
            <select
              className="form-select"
              value={selectedEmp}
              onChange={(e) => setSelectedEmp(e.target.value)}
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô --</option>
              {filteredEmployees.map((emp) => (
                <option key={emp.employee_code} value={emp.employee_code}>
                  {emp.employee_code} - {emp.first_name} {emp.last_name}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ */}
      {loading ? (
        <div className="text-center mt-5 text-secondary">
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...
        </div>
      ) : !workInfo ? (
        <div className="alert alert-warning mt-4 mx-4">
          ‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </div>
      ) : (
        <>
          {/* üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
          <div className="card shadow-sm border-0 rounded-4 mb-4">
            <div className="p-3 fw-bold text-dark border-bottom bg-light">
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            </div>
            <div className="p-4">
              <div className="row">
                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                  <div className="input-group">
                    <span className="input-group-text bg-light">
                      <FaBriefcase className="text-secondary" />
                    </span>
                    <input
                      type="text"
                      name="position"
                      value={workInfo.position || ""}
                      onChange={handleChange}
                      className="form-control"
                    />
                  </div>
                </div>

                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡πÅ‡∏ú‡∏ô‡∏Å</label>
                  <div className="input-group">
                    <span className="input-group-text bg-light">
                      <FaBuilding className="text-secondary" />
                    </span>
                    <input
                      type="text"
                      name="department"
                      value={workInfo.department || ""}
                      onChange={handleChange}
                      className="form-control"
                    />
                  </div>
                </div>

                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
                  <div className="input-group">
                    <span className="input-group-text bg-light">
                      <FaCalendarAlt className="text-secondary" />
                    </span>
                    <input
                      type="date"
                      name="hire_date"
                      value={
                        workInfo.hire_date
                          ? workInfo.hire_date.split("T")[0]
                          : ""
                      }
                      onChange={handleChange}
                      className="form-control"
                    />
                  </div>
                </div>

                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡∏≠‡∏≤‡∏¢‡∏∏‡∏á‡∏≤‡∏ô</label>
                  <input
                    type="text"
                    name="work_years"
                    value={`${workInfo.work_years || 0} ‡∏õ‡∏µ`}
                    className="form-control"
                    readOnly
                  />
                </div>

                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
                  <input
                    type="text"
                    name="salary"
                    value={
                      workInfo.total_salary ? workInfo.total_salary.toLocaleString() : ""
                    }
                    onChange={handleChange}
                    className="form-control"
                  />
                </div>

                <div className="col-md-4 mb-3">
                  <label className="fw-semibold">‡πÇ‡∏ö‡∏ô‡∏±‡∏™</label>
                  <input
                    type="text"
                    name="bonus"
                    value={
                      workInfo.bonus ? workInfo.bonus.toLocaleString() : ""
                    }
                    onChange={handleChange}
                    className="form-control"
                  />
                </div>
              </div>
            </div>
          </div>

          {/* üî∏ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢ */}
          <div className="card shadow-sm border-0 rounded-4 mb-4">
            <div className="p-3 fw-bold text-dark border-bottom bg-light d-flex justify-content-between align-items-center">
              <span>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢ / ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</span>
              <button
                className="btn btn-sm btn-primary d-flex align-items-center"
                onClick={handleAddTransfer}
              >
                <FaPlus className="me-1" /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </button>
            </div>
            <div className="p-4">
              <table className="table table-bordered align-middle">
                <thead className="table-light">
                  <tr>
                    <th style={{ width: "15%" }}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                    <th style={{ width: "20%" }}>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°</th>
                    <th style={{ width: "20%" }}>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà</th>
                    <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                    <th style={{ width: "8%" }}>‡∏•‡∏ö</th>
                  </tr>
                </thead>
                <tbody>
                  {transferHistory.map((t, index) => (
                    <tr key={index}>
                      <td>
                        <input
                          type="date"
                          value={t.date ? t.date.split("T")[0] : ""}
                          onChange={(e) =>
                            handleTransferChange(index, "date", e.target.value)
                          }
                          className="form-control"
                        />
                      </td>
                      <td>
                        <input
                          type="text"
                          value={t.oldPosition || t.old_position || ""}
                          onChange={(e) =>
                            handleTransferChange(
                              index,
                              "oldPosition",
                              e.target.value
                            )
                          }
                          className="form-control"
                        />
                      </td>
                      <td>
                        <input
                          type="text"
                          value={t.newPosition || t.new_position || ""}
                          onChange={(e) =>
                            handleTransferChange(
                              index,
                              "newPosition",
                              e.target.value
                            )
                          }
                          className="form-control"
                        />
                      </td>
                      <td>
                        <input
                          type="text"
                          value={t.note || t.remark || ""}
                          onChange={(e) =>
                            handleTransferChange(index, "note", e.target.value)
                          }
                          className="form-control"
                        />
                      </td>
                      <td className="text-center">
                        <button
                          className="btn btn-sm btn-danger"
                          onClick={() => handleDeleteTransfer(index)}
                        >
                          <FaTrashAlt />
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* üî∏ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
          <div className="text-end mt-3 mb-5">
            <button className="btn btn-success me-2 px-4" onClick={handleSave}>
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
            <button className="btn btn-outline-secondary px-4">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </div>
        </>
      )}
    </div>
  );
}

export default EmployeeData;
